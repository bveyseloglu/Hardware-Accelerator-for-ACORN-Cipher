-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity acorn128_enc_onebyte is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 11;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC );
end;


architecture behav of acorn128_enc_onebyte is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "acorn128_enc_onebyte,hls_ip_2014_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.220000,HLS_SYN_LAT=4855,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=421,HLS_SYN_LUT=572}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_57 : BOOLEAN;
    signal ap_ready : STD_LOGIC;
    signal state_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal state_ce0 : STD_LOGIC;
    signal state_we0 : STD_LOGIC;
    signal state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal plaintextbyte : STD_LOGIC_VECTOR (7 downto 0);
    signal ciphertextbyte : STD_LOGIC_VECTOR (7 downto 0);
    signal ksbyte : STD_LOGIC_VECTOR (7 downto 0);
    signal cabyte : STD_LOGIC_VECTOR (7 downto 0);
    signal cbbyte : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal acorn128_enc_onebyte_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal tmp_fu_82_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_265 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_87_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_270 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_92_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_275 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_280 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_285 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_290 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_295 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_305 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_315 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_320 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_335 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_reg_345 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_355 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_reg_360 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_370 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_375 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_380 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start : STD_LOGIC;
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done : STD_LOGIC;
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_idle : STD_LOGIC;
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_ready : STD_LOGIC;
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_ce0 : STD_LOGIC;
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_we0 : STD_LOGIC;
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_162 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_170 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_178 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_186 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_194 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_202 : BOOLEAN;
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_210 : BOOLEAN;
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_218 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_225 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_233 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_241 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_249 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_257 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_265 : BOOLEAN;
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_273 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        state_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        state_ce0 : OUT STD_LOGIC;
        state_we0 : OUT STD_LOGIC;
        state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        plaintextbit : IN STD_LOGIC_VECTOR (0 downto 0);
        ca : IN STD_LOGIC_VECTOR (0 downto 0);
        cb : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component acorn128_enc_onebyte_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        state_address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        state_ce0 : IN STD_LOGIC;
        state_we0 : IN STD_LOGIC;
        state_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        state_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        plaintextbyte : OUT STD_LOGIC_VECTOR (7 downto 0);
        ciphertextbyte : OUT STD_LOGIC_VECTOR (7 downto 0);
        ksbyte : OUT STD_LOGIC_VECTOR (7 downto 0);
        cabyte : OUT STD_LOGIC_VECTOR (7 downto 0);
        cbbyte : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    acorn128_enc_onebyte_AXILiteS_s_axi_U : component acorn128_enc_onebyte_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => acorn128_enc_onebyte_AXILiteS_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => ap_return,
        state_address0 => state_address0,
        state_ce0 => state_ce0,
        state_we0 => state_we0,
        state_d0 => state_d0,
        state_q0 => state_q0,
        plaintextbyte => plaintextbyte,
        ciphertextbyte => ciphertextbyte,
        ksbyte => ksbyte,
        cabyte => cabyte,
        cbbyte => cbbyte);

    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73 : component acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start,
        ap_done => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done,
        ap_idle => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_idle,
        ap_ready => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_ready,
        state_address0 => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_address0,
        state_ce0 => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_ce0,
        state_we0 => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_we0,
        state_d0 => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_d0,
        state_q0 => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_q0,
        plaintextbit => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit,
        ca => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca,
        cb => grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg assign process. --
    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14))) then 
                    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_ready)) then 
                    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_10_reg_315 <= cbbyte(3 downto 3);
                tmp_11_reg_320 <= plaintextbyte(3 downto 3);
                tmp_12_reg_325 <= cabyte(4 downto 4);
                tmp_13_reg_330 <= cbbyte(4 downto 4);
                tmp_14_reg_335 <= plaintextbyte(4 downto 4);
                tmp_15_reg_340 <= cabyte(5 downto 5);
                tmp_16_reg_345 <= cbbyte(5 downto 5);
                tmp_17_reg_350 <= plaintextbyte(5 downto 5);
                tmp_18_reg_355 <= cabyte(6 downto 6);
                tmp_19_reg_360 <= cbbyte(6 downto 6);
                tmp_1_reg_270 <= tmp_1_fu_87_p1;
                tmp_20_reg_365 <= plaintextbyte(6 downto 6);
                tmp_21_reg_370 <= plaintextbyte(7 downto 7);
                tmp_22_reg_375 <= cabyte(7 downto 7);
                tmp_23_reg_380 <= cbbyte(7 downto 7);
                tmp_2_reg_275 <= tmp_2_fu_92_p1;
                tmp_3_reg_280 <= cabyte(1 downto 1);
                tmp_4_reg_285 <= cbbyte(1 downto 1);
                tmp_5_reg_290 <= plaintextbyte(1 downto 1);
                tmp_6_reg_295 <= cabyte(2 downto 2);
                tmp_7_reg_300 <= cbbyte(2 downto 2);
                tmp_8_reg_305 <= plaintextbyte(2 downto 2);
                tmp_9_reg_310 <= cabyte(3 downto 3);
                tmp_reg_265 <= tmp_fu_82_p1;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                if (not((ap_const_logic_0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (not((ap_const_logic_0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((ap_const_logic_0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_logic_0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done))) then
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                if (not((ap_const_logic_0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done))) then
                    ap_NS_fsm <= ap_ST_st13_fsm_12;
                else
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                end if;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                if (not((ap_const_logic_0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done))) then
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                else
                    ap_NS_fsm <= ap_ST_st14_fsm_13;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_const_logic_0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    acorn128_enc_onebyte_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- ap_done assign process. --
    ap_done_assign_proc : process(grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_logic_0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) and not((ap_const_logic_0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    -- ap_rst_n_inv assign process. --
    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    -- ap_sig_bdd_162 assign process. --
    ap_sig_bdd_162_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_162 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_170 assign process. --
    ap_sig_bdd_170_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_170 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_178 assign process. --
    ap_sig_bdd_178_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_178 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_186 assign process. --
    ap_sig_bdd_186_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_186 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_194 assign process. --
    ap_sig_bdd_194_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_194 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_202 assign process. --
    ap_sig_bdd_202_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_202 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_210 assign process. --
    ap_sig_bdd_210_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_210 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_218 assign process. --
    ap_sig_bdd_218_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_218 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_225 assign process. --
    ap_sig_bdd_225_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_225 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_233 assign process. --
    ap_sig_bdd_233_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_233 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_241 assign process. --
    ap_sig_bdd_241_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_241 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_249 assign process. --
    ap_sig_bdd_249_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_249 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_257 assign process. --
    ap_sig_bdd_257_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_257 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_bdd_265 assign process. --
    ap_sig_bdd_265_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_265 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_273 assign process. --
    ap_sig_bdd_273_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_273 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_57 assign process. --
    ap_sig_bdd_57_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_57 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_249)
    begin
        if (ap_sig_bdd_249) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_194)
    begin
        if (ap_sig_bdd_194) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_257)
    begin
        if (ap_sig_bdd_257) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_202)
    begin
        if (ap_sig_bdd_202) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_265)
    begin
        if (ap_sig_bdd_265) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_210)
    begin
        if (ap_sig_bdd_210) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_273)
    begin
        if (ap_sig_bdd_273) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_57)
    begin
        if (ap_sig_bdd_57) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_218)
    begin
        if (ap_sig_bdd_218) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_162)
    begin
        if (ap_sig_bdd_162) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_225)
    begin
        if (ap_sig_bdd_225) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_170)
    begin
        if (ap_sig_bdd_170) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_233)
    begin
        if (ap_sig_bdd_233) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_178)
    begin
        if (ap_sig_bdd_178) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_241)
    begin
        if (ap_sig_bdd_241) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_186)
    begin
        if (ap_sig_bdd_186) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start <= grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg;

    -- grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca assign process. --
    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca_assign_proc : process(tmp_reg_265, tmp_3_reg_280, tmp_6_reg_295, tmp_9_reg_310, tmp_12_reg_325, tmp_15_reg_340, tmp_18_reg_355, tmp_22_reg_375, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca <= tmp_22_reg_375;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca <= tmp_18_reg_355;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca <= tmp_15_reg_340;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca <= tmp_12_reg_325;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca <= tmp_9_reg_310;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca <= tmp_6_reg_295;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca <= tmp_3_reg_280;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca <= tmp_reg_265;
        else 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca <= "X";
        end if; 
    end process;


    -- grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb assign process. --
    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb_assign_proc : process(tmp_1_reg_270, tmp_4_reg_285, tmp_7_reg_300, tmp_10_reg_315, tmp_13_reg_330, tmp_16_reg_345, tmp_19_reg_360, tmp_23_reg_380, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb <= tmp_23_reg_380;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb <= tmp_19_reg_360;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb <= tmp_16_reg_345;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb <= tmp_13_reg_330;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb <= tmp_10_reg_315;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb <= tmp_7_reg_300;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb <= tmp_4_reg_285;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb <= tmp_1_reg_270;
        else 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb <= "X";
        end if; 
    end process;


    -- grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit assign process. --
    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit_assign_proc : process(tmp_2_reg_275, tmp_5_reg_290, tmp_8_reg_305, tmp_11_reg_320, tmp_14_reg_335, tmp_17_reg_350, tmp_20_reg_365, tmp_21_reg_370, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit <= tmp_21_reg_370;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit <= tmp_20_reg_365;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit <= tmp_17_reg_350;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit <= tmp_14_reg_335;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit <= tmp_11_reg_320;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit <= tmp_8_reg_305;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit <= tmp_5_reg_290;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit <= tmp_2_reg_275;
        else 
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit <= "X";
        end if; 
    end process;

    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_q0 <= state_q0;
    state_address0 <= grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_address0;

    -- state_ce0 assign process. --
    state_ce0_assign_proc : process(grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_ce0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_ce0 <= grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_ce0;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    state_d0 <= grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_d0;

    -- state_we0 assign process. --
    state_we0_assign_proc : process(grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_we0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st16_fsm_15)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15))) then 
            state_we0 <= grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_we0;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_87_p1 <= cbbyte(1 - 1 downto 0);
    tmp_2_fu_92_p1 <= plaintextbyte(1 - 1 downto 0);
    tmp_fu_82_p1 <= cabyte(1 - 1 downto 0);
end behav;

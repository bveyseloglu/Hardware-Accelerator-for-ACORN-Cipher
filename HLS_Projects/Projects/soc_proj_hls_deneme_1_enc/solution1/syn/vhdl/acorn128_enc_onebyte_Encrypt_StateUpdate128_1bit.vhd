-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.4
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    plaintextbit : IN STD_LOGIC_VECTOR (0 downto 0);
    ca : IN STD_LOGIC_VECTOR (0 downto 0);
    cb : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_EB : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011101011";
    constant ap_const_lv64_E6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011100110";
    constant ap_const_lv64_121 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100100001";
    constant ap_const_lv64_C4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011000100";
    constant ap_const_lv64_C1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011000001";
    constant ap_const_lv64_A0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010100000";
    constant ap_const_lv64_9A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000010011010";
    constant ap_const_lv64_6F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001101111";
    constant ap_const_lv64_6B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001101011";
    constant ap_const_lv64_42 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000010";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_F4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000011110100";
    constant ap_const_lv64_124 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100100100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv9_124 : STD_LOGIC_VECTOR (8 downto 0) := "100100100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_bdd_41 : BOOLEAN;
    signal reg_256 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_bdd_62 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_bdd_69 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_bdd_77 : BOOLEAN;
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_bdd_85 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_bdd_93 : BOOLEAN;
    signal reg_260 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_bdd_102 : BOOLEAN;
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_bdd_109 : BOOLEAN;
    signal reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_bdd_118 : BOOLEAN;
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_bdd_125 : BOOLEAN;
    signal ap_sig_cseq_ST_st13_fsm_12 : STD_LOGIC;
    signal ap_sig_bdd_133 : BOOLEAN;
    signal reg_268 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_bdd_142 : BOOLEAN;
    signal ap_sig_cseq_ST_st14_fsm_13 : STD_LOGIC;
    signal ap_sig_bdd_149 : BOOLEAN;
    signal tmp_24_fu_278_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_528 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_2_gep_fu_91_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal state_addr_2_reg_533 : STD_LOGIC_VECTOR (8 downto 0);
    signal state_addr_3_gep_fu_100_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal state_addr_3_reg_538 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_272_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_reg_543 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_bdd_170 : BOOLEAN;
    signal tmp_25_fu_282_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_553 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_5_gep_fu_118_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal state_addr_5_reg_558 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_s_fu_286_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_563 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_1_fu_297_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal x_assign_1_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_303_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_reg_573 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_7_gep_fu_136_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal state_addr_7_reg_584 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_28_fu_307_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_594 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_9_gep_fu_154_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal state_addr_9_reg_599 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp3_fu_311_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp3_reg_604 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_323_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_609 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_329_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_11_gep_fu_172_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal state_addr_11_reg_624 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_358_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_634 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_assign_fu_364_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal z_assign_reg_655 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st15_fsm_14 : STD_LOGIC;
    signal ap_sig_bdd_221 : BOOLEAN;
    signal y_assign_fu_379_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_assign_reg_660 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_i_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_reg_665 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i_fu_438_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_i_i_reg_675 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st16_fsm_15 : STD_LOGIC;
    signal ap_sig_bdd_236 : BOOLEAN;
    signal tmp_2_i_i_fu_444_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_i_i_reg_680 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st21_fsm_20 : STD_LOGIC;
    signal ap_sig_bdd_247 : BOOLEAN;
    signal tmp_1_i_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_reg_690 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_reg_695 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_466_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_703 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st22_fsm_21 : STD_LOGIC;
    signal ap_sig_bdd_260 : BOOLEAN;
    signal exitcond_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_243 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_cseq_ST_st23_fsm_22 : STD_LOGIC;
    signal ap_sig_bdd_276 : BOOLEAN;
    signal tmp_6_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_518_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_bdd_321 : BOOLEAN;
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_bdd_329 : BOOLEAN;
    signal ap_sig_cseq_ST_st19_fsm_18 : STD_LOGIC;
    signal ap_sig_bdd_337 : BOOLEAN;
    signal ap_sig_cseq_ST_st20_fsm_19 : STD_LOGIC;
    signal ap_sig_bdd_345 : BOOLEAN;
    signal tmp_4_fu_511_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_291_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp4_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_333_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_i_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i9_i_i_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_i_i_i_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_373_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_27_fu_369_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_385_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_i_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_389_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_i_i_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp8_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_i_i_i_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp9_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp7_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_2_fu_432_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp12_fu_482_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp10_fu_477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp13_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp15_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp14_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp14_cast_fu_507_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp11_fu_486_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);


begin




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- j_reg_243 assign process. --
    j_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
                j_reg_243 <= j_1_reg_703;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
                j_reg_243 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21)) then
                j_1_reg_703 <= j_1_fu_466_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11))) then
                reg_256 <= state_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6))) then
                reg_260 <= state_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12))) then
                reg_264 <= state_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13))) then
                reg_268 <= state_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp1_reg_543 <= grp_fu_272_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                tmp3_reg_604 <= tmp3_fu_311_p2;
                tmp_29_reg_614 <= tmp_29_fu_329_p1;
                tmp_3_reg_609 <= tmp_3_fu_323_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then
                tmp_1_i_i_reg_675 <= tmp_1_i_i_fu_438_p2;
                tmp_2_i_i_reg_680 <= tmp_2_i_i_fu_444_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then
                tmp_1_i_reg_690 <= tmp_1_i_fu_450_p2;
                tmp_2_i_reg_695 <= tmp_2_i_fu_455_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then
                tmp_24_reg_528 <= tmp_24_fu_278_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                tmp_25_reg_553 <= tmp_25_fu_282_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then
                tmp_26_reg_573 <= tmp_26_fu_303_p1;
                tmp_s_reg_563 <= tmp_s_fu_286_p2;
                x_assign_1_reg_568 <= x_assign_1_fu_297_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then
                tmp_28_reg_594 <= tmp_28_fu_307_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then
                tmp_5_reg_634 <= tmp_5_fu_358_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then
                tmp_i_i_reg_665 <= tmp_i_i_fu_426_p2;
                y_assign_reg_660 <= y_assign_fu_379_p2;
                z_assign_reg_655 <= z_assign_fu_364_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                tmp_reg_629 <= tmp_fu_352_p2;
            end if;
        end if;
    end process;
    state_addr_2_reg_533(8 downto 0) <= "011100110";
    state_addr_3_reg_538(8 downto 0) <= "100100001";
    state_addr_5_reg_558(8 downto 0) <= "011000001";
    state_addr_7_reg_584(8 downto 0) <= "010011010";
    state_addr_9_reg_599(8 downto 0) <= "001101011";
    state_addr_11_reg_624(8 downto 0) <= "000111101";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_460_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                if (not((exitcond_fu_460_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                end if;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st22_fsm_21, exitcond_fu_460_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((exitcond_fu_460_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_sig_cseq_ST_st22_fsm_21, exitcond_fu_460_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((exitcond_fu_460_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_102 assign process. --
    ap_sig_bdd_102_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_102 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    -- ap_sig_bdd_109 assign process. --
    ap_sig_bdd_109_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_109 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    -- ap_sig_bdd_118 assign process. --
    ap_sig_bdd_118_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_118 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    -- ap_sig_bdd_125 assign process. --
    ap_sig_bdd_125_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_125 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    -- ap_sig_bdd_133 assign process. --
    ap_sig_bdd_133_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_133 <= (ap_const_lv1_1 = ap_CS_fsm(12 downto 12));
    end process;


    -- ap_sig_bdd_142 assign process. --
    ap_sig_bdd_142_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_142 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    -- ap_sig_bdd_149 assign process. --
    ap_sig_bdd_149_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_149 <= (ap_const_lv1_1 = ap_CS_fsm(13 downto 13));
    end process;


    -- ap_sig_bdd_170 assign process. --
    ap_sig_bdd_170_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_170 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    -- ap_sig_bdd_221 assign process. --
    ap_sig_bdd_221_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_221 <= (ap_const_lv1_1 = ap_CS_fsm(14 downto 14));
    end process;


    -- ap_sig_bdd_236 assign process. --
    ap_sig_bdd_236_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_236 <= (ap_const_lv1_1 = ap_CS_fsm(15 downto 15));
    end process;


    -- ap_sig_bdd_247 assign process. --
    ap_sig_bdd_247_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_247 <= (ap_const_lv1_1 = ap_CS_fsm(20 downto 20));
    end process;


    -- ap_sig_bdd_260 assign process. --
    ap_sig_bdd_260_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_260 <= (ap_const_lv1_1 = ap_CS_fsm(21 downto 21));
    end process;


    -- ap_sig_bdd_276 assign process. --
    ap_sig_bdd_276_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_276 <= (ap_const_lv1_1 = ap_CS_fsm(22 downto 22));
    end process;


    -- ap_sig_bdd_321 assign process. --
    ap_sig_bdd_321_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_321 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    -- ap_sig_bdd_329 assign process. --
    ap_sig_bdd_329_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_329 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    -- ap_sig_bdd_337 assign process. --
    ap_sig_bdd_337_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_337 <= (ap_const_lv1_1 = ap_CS_fsm(18 downto 18));
    end process;


    -- ap_sig_bdd_345 assign process. --
    ap_sig_bdd_345_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_345 <= (ap_const_lv1_1 = ap_CS_fsm(19 downto 19));
    end process;


    -- ap_sig_bdd_41 assign process. --
    ap_sig_bdd_41_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_41 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    -- ap_sig_bdd_62 assign process. --
    ap_sig_bdd_62_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_62 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    -- ap_sig_bdd_69 assign process. --
    ap_sig_bdd_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_69 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    -- ap_sig_bdd_77 assign process. --
    ap_sig_bdd_77_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_77 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    -- ap_sig_bdd_85 assign process. --
    ap_sig_bdd_85_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_85 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    -- ap_sig_bdd_93 assign process. --
    ap_sig_bdd_93_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_bdd_93 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    -- ap_sig_cseq_ST_st10_fsm_9 assign process. --
    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_bdd_85)
    begin
        if (ap_sig_bdd_85) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st11_fsm_10 assign process. --
    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_bdd_125)
    begin
        if (ap_sig_bdd_125) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st12_fsm_11 assign process. --
    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_bdd_93)
    begin
        if (ap_sig_bdd_93) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st13_fsm_12 assign process. --
    ap_sig_cseq_ST_st13_fsm_12_assign_proc : process(ap_sig_bdd_133)
    begin
        if (ap_sig_bdd_133) then 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st13_fsm_12 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st14_fsm_13 assign process. --
    ap_sig_cseq_ST_st14_fsm_13_assign_proc : process(ap_sig_bdd_149)
    begin
        if (ap_sig_bdd_149) then 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st14_fsm_13 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st15_fsm_14 assign process. --
    ap_sig_cseq_ST_st15_fsm_14_assign_proc : process(ap_sig_bdd_221)
    begin
        if (ap_sig_bdd_221) then 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st15_fsm_14 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st16_fsm_15 assign process. --
    ap_sig_cseq_ST_st16_fsm_15_assign_proc : process(ap_sig_bdd_236)
    begin
        if (ap_sig_bdd_236) then 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st16_fsm_15 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st17_fsm_16 assign process. --
    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_bdd_321)
    begin
        if (ap_sig_bdd_321) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st18_fsm_17 assign process. --
    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_bdd_329)
    begin
        if (ap_sig_bdd_329) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st19_fsm_18 assign process. --
    ap_sig_cseq_ST_st19_fsm_18_assign_proc : process(ap_sig_bdd_337)
    begin
        if (ap_sig_bdd_337) then 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st19_fsm_18 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st1_fsm_0 assign process. --
    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_bdd_41)
    begin
        if (ap_sig_bdd_41) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st20_fsm_19 assign process. --
    ap_sig_cseq_ST_st20_fsm_19_assign_proc : process(ap_sig_bdd_345)
    begin
        if (ap_sig_bdd_345) then 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st20_fsm_19 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st21_fsm_20 assign process. --
    ap_sig_cseq_ST_st21_fsm_20_assign_proc : process(ap_sig_bdd_247)
    begin
        if (ap_sig_bdd_247) then 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st21_fsm_20 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st22_fsm_21 assign process. --
    ap_sig_cseq_ST_st22_fsm_21_assign_proc : process(ap_sig_bdd_260)
    begin
        if (ap_sig_bdd_260) then 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st22_fsm_21 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st23_fsm_22 assign process. --
    ap_sig_cseq_ST_st23_fsm_22_assign_proc : process(ap_sig_bdd_276)
    begin
        if (ap_sig_bdd_276) then 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st23_fsm_22 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st2_fsm_1 assign process. --
    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_bdd_62)
    begin
        if (ap_sig_bdd_62) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st3_fsm_2 assign process. --
    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_bdd_102)
    begin
        if (ap_sig_bdd_102) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st4_fsm_3 assign process. --
    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_bdd_170)
    begin
        if (ap_sig_bdd_170) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st5_fsm_4 assign process. --
    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_bdd_69)
    begin
        if (ap_sig_bdd_69) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st6_fsm_5 assign process. --
    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_bdd_77)
    begin
        if (ap_sig_bdd_77) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st7_fsm_6 assign process. --
    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_bdd_109)
    begin
        if (ap_sig_bdd_109) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st8_fsm_7 assign process. --
    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_bdd_118)
    begin
        if (ap_sig_bdd_118) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_cseq_ST_st9_fsm_8 assign process. --
    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_bdd_142)
    begin
        if (ap_sig_bdd_142) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_460_p2 <= "1" when (j_reg_243 = ap_const_lv9_124) else "0";
    grp_fu_272_p2 <= (reg_256 xor state_q0);
    j_1_fu_466_p2 <= std_logic_vector(unsigned(j_reg_243) + unsigned(ap_const_lv9_1));
    state_addr_11_gep_fu_172_p3 <= ap_const_lv64_3D(9 - 1 downto 0);
    state_addr_2_gep_fu_91_p3 <= ap_const_lv64_E6(9 - 1 downto 0);
    state_addr_3_gep_fu_100_p3 <= ap_const_lv64_121(9 - 1 downto 0);
    state_addr_5_gep_fu_118_p3 <= ap_const_lv64_C1(9 - 1 downto 0);
    state_addr_7_gep_fu_136_p3 <= ap_const_lv64_9A(9 - 1 downto 0);
    state_addr_9_gep_fu_154_p3 <= ap_const_lv64_6B(9 - 1 downto 0);

    -- state_address0 assign process. --
    state_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st14_fsm_13, state_addr_2_reg_533, state_addr_3_reg_538, ap_sig_cseq_ST_st4_fsm_3, state_addr_5_reg_558, state_addr_7_reg_584, state_addr_9_reg_599, state_addr_11_reg_624, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st22_fsm_21, exitcond_fu_460_p2, ap_sig_cseq_ST_st23_fsm_22, tmp_6_fu_472_p1, tmp_7_fu_518_p1, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            state_address0 <= tmp_7_fu_518_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((exitcond_fu_460_p2 = ap_const_lv1_0)))) then 
            state_address0 <= ap_const_lv64_124(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            state_address0 <= state_addr_11_reg_624;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            state_address0 <= state_addr_9_reg_599;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            state_address0 <= state_addr_7_reg_584;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            state_address0 <= state_addr_5_reg_558;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            state_address0 <= state_addr_2_reg_533;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            state_address0 <= state_addr_3_reg_538;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (exitcond_fu_460_p2 = ap_const_lv1_0))) then 
            state_address0 <= tmp_6_fu_472_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14)) then 
            state_address0 <= ap_const_lv64_F4(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13)) then 
            state_address0 <= ap_const_lv64_C(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12)) then 
            state_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11)) then 
            state_address0 <= ap_const_lv64_17(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then 
            state_address0 <= ap_const_lv64_3D(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then 
            state_address0 <= ap_const_lv64_42(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8)) then 
            state_address0 <= ap_const_lv64_6B(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            state_address0 <= ap_const_lv64_6F(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            state_address0 <= ap_const_lv64_9A(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            state_address0 <= ap_const_lv64_A0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            state_address0 <= ap_const_lv64_C1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            state_address0 <= ap_const_lv64_C4(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            state_address0 <= ap_const_lv64_121(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            state_address0 <= ap_const_lv64_E6(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            state_address0 <= ap_const_lv64_EB(9 - 1 downto 0);
        else 
            state_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    -- state_ce0 assign process. --
    state_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st10_fsm_9, ap_sig_cseq_ST_st12_fsm_11, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st7_fsm_6, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_st11_fsm_10, ap_sig_cseq_ST_st13_fsm_12, ap_sig_cseq_ST_st9_fsm_8, ap_sig_cseq_ST_st14_fsm_13, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st15_fsm_14, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st22_fsm_21, exitcond_fu_460_p2, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9) or (ap_const_logic_1 = ap_sig_cseq_ST_st12_fsm_11) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10) or (ap_const_logic_1 = ap_sig_cseq_ST_st13_fsm_12) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8) or (ap_const_logic_1 = ap_sig_cseq_ST_st14_fsm_13) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st15_fsm_14) or (ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and (exitcond_fu_460_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((exitcond_fu_460_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- state_d0 assign process. --
    state_d0_assign_proc : process(state_q0, tmp_s_reg_563, x_assign_1_reg_568, tmp_3_reg_609, tmp_5_reg_634, z_assign_reg_655, y_assign_reg_660, ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st22_fsm_21, exitcond_fu_460_p2, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19, tmp_4_fu_511_p2)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22)) then 
            state_d0 <= state_q0;
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((exitcond_fu_460_p2 = ap_const_lv1_0)))) then 
            state_d0 <= tmp_4_fu_511_p2;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20)) then 
            state_d0 <= y_assign_reg_660;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19)) then 
            state_d0 <= tmp_5_reg_634;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18)) then 
            state_d0 <= tmp_3_reg_609;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17)) then 
            state_d0 <= z_assign_reg_655;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16)) then 
            state_d0 <= x_assign_1_reg_568;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15)) then 
            state_d0 <= tmp_s_reg_563;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    -- state_we0 assign process. --
    state_we0_assign_proc : process(ap_sig_cseq_ST_st16_fsm_15, ap_sig_cseq_ST_st21_fsm_20, ap_sig_cseq_ST_st22_fsm_21, exitcond_fu_460_p2, ap_sig_cseq_ST_st23_fsm_22, ap_sig_cseq_ST_st17_fsm_16, ap_sig_cseq_ST_st18_fsm_17, ap_sig_cseq_ST_st19_fsm_18, ap_sig_cseq_ST_st20_fsm_19)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st16_fsm_15) or (ap_const_logic_1 = ap_sig_cseq_ST_st21_fsm_20) or (ap_const_logic_1 = ap_sig_cseq_ST_st23_fsm_22) or ((ap_const_logic_1 = ap_sig_cseq_ST_st22_fsm_21) and not((exitcond_fu_460_p2 = ap_const_lv1_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16) or (ap_const_logic_1 = ap_sig_cseq_ST_st18_fsm_17) or (ap_const_logic_1 = ap_sig_cseq_ST_st19_fsm_18) or (ap_const_logic_1 = ap_sig_cseq_ST_st20_fsm_19))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp10_fu_477_p2 <= (reg_268 xor tmp_5_reg_634);
    tmp11_fu_486_p2 <= (tmp12_fu_482_p2 xor tmp10_fu_477_p2);
    tmp12_fu_482_p2 <= (tmp_2_i_i_reg_680 xor tmp_1_i_i_reg_675);
    tmp13_fu_492_p2 <= (tmp_1_i_reg_690 xor tmp_2_i_reg_695);
    tmp14_cast_fu_507_p1 <= std_logic_vector(resize(unsigned(tmp14_fu_501_p2),8));
    tmp14_fu_501_p2 <= (tmp13_fu_492_p2 xor tmp15_fu_496_p2);
    tmp15_fu_496_p2 <= (plaintextbit xor ap_const_lv1_1);
    tmp2_fu_291_p2 <= (reg_260 xor state_q0);
    tmp3_fu_311_p2 <= (reg_256 xor reg_264);
    tmp4_fu_317_p2 <= (reg_264 xor state_q0);
    tmp6_fu_373_p2 <= (reg_256 xor reg_268);
    tmp7_fu_416_p2 <= (tmp8_fu_410_p2 xor tmp_29_reg_614);
    tmp8_fu_410_p2 <= (tmp_32_fu_389_p1 xor tmp_2_i_i_i_fu_404_p2);
    tmp9_fu_421_p2 <= (tmp_reg_629 xor tmp_1_i_i_i_fu_399_p2);
    tmp_1_i_fu_450_p2 <= (tmp_25_reg_553 and ca);
    tmp_1_i_i_fu_438_p2 <= (tmp_i_i_2_fu_432_p2 and state_q0);
    tmp_1_i_i_i_fu_399_p2 <= (tmp_i_i_i_fu_393_p2 and tmp_24_reg_528);
    tmp_24_fu_278_p1 <= state_q0(1 - 1 downto 0);
    tmp_25_fu_282_p1 <= state_q0(1 - 1 downto 0);
    tmp_26_fu_303_p1 <= x_assign_1_fu_297_p2(1 - 1 downto 0);
    tmp_27_fu_369_p1 <= z_assign_fu_364_p2(1 - 1 downto 0);
    tmp_28_fu_307_p1 <= state_q0(1 - 1 downto 0);
    tmp_29_fu_329_p1 <= tmp_3_fu_323_p2(1 - 1 downto 0);
    tmp_2_i_fu_455_p2 <= (tmp_i_i_reg_665 and cb);
    tmp_2_i_i_fu_444_p2 <= (reg_260 and reg_264);
    tmp_2_i_i_i_fu_404_p2 <= (tmp_27_fu_369_p1 and tmp_31_fu_385_p1);
    tmp_30_fu_333_p1 <= state_q0(1 - 1 downto 0);
    tmp_31_fu_385_p1 <= y_assign_fu_379_p2(1 - 1 downto 0);
    tmp_32_fu_389_p1 <= state_q0(1 - 1 downto 0);
    tmp_3_fu_323_p2 <= (tmp4_fu_317_p2 xor reg_268);
    tmp_4_fu_511_p2 <= (tmp14_cast_fu_507_p1 xor tmp11_fu_486_p2);
    tmp_4_i_i_i_fu_341_p2 <= (tmp_26_reg_573 xor ap_const_lv1_1);
    tmp_5_fu_358_p2 <= (grp_fu_272_p2 xor reg_264);
    tmp_5_i_i_i_fu_346_p2 <= (tmp_30_fu_333_p1 and tmp_4_i_i_i_fu_341_p2);
    tmp_6_fu_472_p1 <= std_logic_vector(resize(unsigned(j_1_fu_466_p2),64));
    tmp_7_fu_518_p1 <= std_logic_vector(resize(unsigned(j_reg_243),64));
    tmp_fu_352_p2 <= (tmp_i9_i_i_fu_337_p2 xor tmp_5_i_i_i_fu_346_p2);
    tmp_i9_i_i_fu_337_p2 <= (tmp_28_reg_594 and tmp_26_reg_573);
    tmp_i_i_2_fu_432_p2 <= (reg_260 xor reg_264);
    tmp_i_i_fu_426_p2 <= (tmp9_fu_421_p2 xor tmp7_fu_416_p2);
    tmp_i_i_i_fu_393_p2 <= (tmp_27_fu_369_p1 xor tmp_31_fu_385_p1);
    tmp_s_fu_286_p2 <= (tmp1_reg_543 xor reg_260);
    x_assign_1_fu_297_p2 <= (tmp2_fu_291_p2 xor reg_256);
    y_assign_fu_379_p2 <= (tmp6_fu_373_p2 xor reg_264);
    z_assign_fu_364_p2 <= (tmp3_reg_604 xor reg_260);
end behav;

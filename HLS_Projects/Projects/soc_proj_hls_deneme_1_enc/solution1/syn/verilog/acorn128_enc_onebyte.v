// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="acorn128_enc_onebyte,hls_ip_2014_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.220000,HLS_SYN_LAT=4855,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=421,HLS_SYN_LUT=572}" *)

module acorn128_enc_onebyte (
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 16'b1;
parameter    ap_ST_st2_fsm_1 = 16'b10;
parameter    ap_ST_st3_fsm_2 = 16'b100;
parameter    ap_ST_st4_fsm_3 = 16'b1000;
parameter    ap_ST_st5_fsm_4 = 16'b10000;
parameter    ap_ST_st6_fsm_5 = 16'b100000;
parameter    ap_ST_st7_fsm_6 = 16'b1000000;
parameter    ap_ST_st8_fsm_7 = 16'b10000000;
parameter    ap_ST_st9_fsm_8 = 16'b100000000;
parameter    ap_ST_st10_fsm_9 = 16'b1000000000;
parameter    ap_ST_st11_fsm_10 = 16'b10000000000;
parameter    ap_ST_st12_fsm_11 = 16'b100000000000;
parameter    ap_ST_st13_fsm_12 = 16'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 16'b10000000000000;
parameter    ap_ST_st15_fsm_14 = 16'b100000000000000;
parameter    ap_ST_st16_fsm_15 = 16'b1000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_1 = 1'b1;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 11;
parameter    C_DATA_WIDTH = 32;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_true = 1'b1;
parameter    C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter    C_WSTRB_WIDTH = (C_DATA_WIDTH / ap_const_int64_8);

input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm = 16'b1;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_bdd_57;
reg    ap_ready;
wire   [8:0] state_address0;
reg    state_ce0;
reg    state_we0;
wire   [7:0] state_d0;
wire   [7:0] state_q0;
wire   [7:0] plaintextbyte;
wire   [7:0] ciphertextbyte;
wire   [7:0] ksbyte;
wire   [7:0] cabyte;
wire   [7:0] cbbyte;
wire   [31:0] ap_return;
wire    acorn128_enc_onebyte_AXILiteS_s_axi_U_ap_dummy_ce;
wire   [0:0] tmp_fu_82_p1;
reg   [0:0] tmp_reg_265;
wire   [0:0] tmp_1_fu_87_p1;
reg   [0:0] tmp_1_reg_270;
wire   [0:0] tmp_2_fu_92_p1;
reg   [0:0] tmp_2_reg_275;
reg   [0:0] tmp_3_reg_280;
reg   [0:0] tmp_4_reg_285;
reg   [0:0] tmp_5_reg_290;
reg   [0:0] tmp_6_reg_295;
reg   [0:0] tmp_7_reg_300;
reg   [0:0] tmp_8_reg_305;
reg   [0:0] tmp_9_reg_310;
reg   [0:0] tmp_10_reg_315;
reg   [0:0] tmp_11_reg_320;
reg   [0:0] tmp_12_reg_325;
reg   [0:0] tmp_13_reg_330;
reg   [0:0] tmp_14_reg_335;
reg   [0:0] tmp_15_reg_340;
reg   [0:0] tmp_16_reg_345;
reg   [0:0] tmp_17_reg_350;
reg   [0:0] tmp_18_reg_355;
reg   [0:0] tmp_19_reg_360;
reg   [0:0] tmp_20_reg_365;
reg   [0:0] tmp_21_reg_370;
reg   [0:0] tmp_22_reg_375;
reg   [0:0] tmp_23_reg_380;
wire    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start;
wire    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done;
wire    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_idle;
wire    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_ready;
wire   [8:0] grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_address0;
wire    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_ce0;
wire    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_we0;
wire   [7:0] grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_d0;
wire   [7:0] grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_q0;
reg   [0:0] grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit;
reg   [0:0] grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca;
reg   [0:0] grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb;
reg    grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg = 1'b0;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_bdd_162;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_bdd_170;
reg    ap_sig_cseq_ST_st7_fsm_6;
reg    ap_sig_bdd_178;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_bdd_186;
reg    ap_sig_cseq_ST_st11_fsm_10;
reg    ap_sig_bdd_194;
reg    ap_sig_cseq_ST_st13_fsm_12;
reg    ap_sig_bdd_202;
reg    ap_sig_cseq_ST_st15_fsm_14;
reg    ap_sig_bdd_210;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_bdd_218;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_bdd_225;
reg    ap_sig_cseq_ST_st6_fsm_5;
reg    ap_sig_bdd_233;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_bdd_241;
reg    ap_sig_cseq_ST_st10_fsm_9;
reg    ap_sig_bdd_249;
reg    ap_sig_cseq_ST_st12_fsm_11;
reg    ap_sig_bdd_257;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_bdd_265;
reg    ap_sig_cseq_ST_st16_fsm_15;
reg    ap_sig_bdd_273;
reg   [15:0] ap_NS_fsm;


acorn128_enc_onebyte_AXILiteS_s_axi #(
    .C_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
acorn128_enc_onebyte_AXILiteS_s_axi_U(
    .AWVALID( s_axi_AXILiteS_AWVALID ),
    .AWREADY( s_axi_AXILiteS_AWREADY ),
    .AWADDR( s_axi_AXILiteS_AWADDR ),
    .WVALID( s_axi_AXILiteS_WVALID ),
    .WREADY( s_axi_AXILiteS_WREADY ),
    .WDATA( s_axi_AXILiteS_WDATA ),
    .WSTRB( s_axi_AXILiteS_WSTRB ),
    .ARVALID( s_axi_AXILiteS_ARVALID ),
    .ARREADY( s_axi_AXILiteS_ARREADY ),
    .ARADDR( s_axi_AXILiteS_ARADDR ),
    .RVALID( s_axi_AXILiteS_RVALID ),
    .RREADY( s_axi_AXILiteS_RREADY ),
    .RDATA( s_axi_AXILiteS_RDATA ),
    .RRESP( s_axi_AXILiteS_RRESP ),
    .BVALID( s_axi_AXILiteS_BVALID ),
    .BREADY( s_axi_AXILiteS_BREADY ),
    .BRESP( s_axi_AXILiteS_BRESP ),
    .ACLK( ap_clk ),
    .ARESET( ap_rst_n_inv ),
    .ACLK_EN( acorn128_enc_onebyte_AXILiteS_s_axi_U_ap_dummy_ce ),
    .ap_start( ap_start ),
    .interrupt( interrupt ),
    .ap_ready( ap_ready ),
    .ap_done( ap_done ),
    .ap_idle( ap_idle ),
    .ap_return( ap_return ),
    .state_address0( state_address0 ),
    .state_ce0( state_ce0 ),
    .state_we0( state_we0 ),
    .state_d0( state_d0 ),
    .state_q0( state_q0 ),
    .plaintextbyte( plaintextbyte ),
    .ciphertextbyte( ciphertextbyte ),
    .ksbyte( ksbyte ),
    .cabyte( cabyte ),
    .cbbyte( cbbyte )
);

acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst_n_inv ),
    .ap_start( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start ),
    .ap_done( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done ),
    .ap_idle( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_idle ),
    .ap_ready( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_ready ),
    .state_address0( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_address0 ),
    .state_ce0( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_ce0 ),
    .state_we0( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_we0 ),
    .state_d0( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_d0 ),
    .state_q0( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_q0 ),
    .plaintextbit( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit ),
    .ca( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca ),
    .cb( grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg
    if (ap_rst_n_inv == 1'b1) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if ((((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0)) | (ap_const_logic_1 == ap_sig_cseq_ST_st3_fsm_2) | (ap_const_logic_1 == ap_sig_cseq_ST_st5_fsm_4) | (ap_const_logic_1 == ap_sig_cseq_ST_st7_fsm_6) | (ap_const_logic_1 == ap_sig_cseq_ST_st9_fsm_8) | (ap_const_logic_1 == ap_sig_cseq_ST_st11_fsm_10) | (ap_const_logic_1 == ap_sig_cseq_ST_st13_fsm_12) | (ap_const_logic_1 == ap_sig_cseq_ST_st15_fsm_14))) begin
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_ready)) begin
            grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == ap_const_logic_0))) begin
        tmp_10_reg_315 <= cbbyte[ap_const_lv32_3];
        tmp_11_reg_320 <= plaintextbyte[ap_const_lv32_3];
        tmp_12_reg_325 <= cabyte[ap_const_lv32_4];
        tmp_13_reg_330 <= cbbyte[ap_const_lv32_4];
        tmp_14_reg_335 <= plaintextbyte[ap_const_lv32_4];
        tmp_15_reg_340 <= cabyte[ap_const_lv32_5];
        tmp_16_reg_345 <= cbbyte[ap_const_lv32_5];
        tmp_17_reg_350 <= plaintextbyte[ap_const_lv32_5];
        tmp_18_reg_355 <= cabyte[ap_const_lv32_6];
        tmp_19_reg_360 <= cbbyte[ap_const_lv32_6];
        tmp_1_reg_270 <= tmp_1_fu_87_p1;
        tmp_20_reg_365 <= plaintextbyte[ap_const_lv32_6];
        tmp_21_reg_370 <= plaintextbyte[ap_const_lv32_7];
        tmp_22_reg_375 <= cabyte[ap_const_lv32_7];
        tmp_23_reg_380 <= cbbyte[ap_const_lv32_7];
        tmp_2_reg_275 <= tmp_2_fu_92_p1;
        tmp_3_reg_280 <= cabyte[ap_const_lv32_1];
        tmp_4_reg_285 <= cbbyte[ap_const_lv32_1];
        tmp_5_reg_290 <= plaintextbyte[ap_const_lv32_1];
        tmp_6_reg_295 <= cabyte[ap_const_lv32_2];
        tmp_7_reg_300 <= cbbyte[ap_const_lv32_2];
        tmp_8_reg_305 <= plaintextbyte[ap_const_lv32_2];
        tmp_9_reg_310 <= cabyte[ap_const_lv32_3];
        tmp_reg_265 <= tmp_fu_82_p1;
    end
end

/// ap_done assign process. ///
always @ (grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done or ap_sig_cseq_ST_st16_fsm_15)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15) & ~(ap_const_logic_0 == grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_sig_cseq_ST_st1_fsm_0)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_const_logic_1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done or ap_sig_cseq_ST_st16_fsm_15)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15) & ~(ap_const_logic_0 == grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st10_fsm_9 assign process. ///
always @ (ap_sig_bdd_249)
begin
    if (ap_sig_bdd_249) begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st10_fsm_9 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st11_fsm_10 assign process. ///
always @ (ap_sig_bdd_194)
begin
    if (ap_sig_bdd_194) begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st11_fsm_10 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st12_fsm_11 assign process. ///
always @ (ap_sig_bdd_257)
begin
    if (ap_sig_bdd_257) begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st12_fsm_11 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st13_fsm_12 assign process. ///
always @ (ap_sig_bdd_202)
begin
    if (ap_sig_bdd_202) begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st13_fsm_12 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st14_fsm_13 assign process. ///
always @ (ap_sig_bdd_265)
begin
    if (ap_sig_bdd_265) begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st15_fsm_14 assign process. ///
always @ (ap_sig_bdd_210)
begin
    if (ap_sig_bdd_210) begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st15_fsm_14 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st16_fsm_15 assign process. ///
always @ (ap_sig_bdd_273)
begin
    if (ap_sig_bdd_273) begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st16_fsm_15 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st1_fsm_0 assign process. ///
always @ (ap_sig_bdd_57)
begin
    if (ap_sig_bdd_57) begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st2_fsm_1 assign process. ///
always @ (ap_sig_bdd_218)
begin
    if (ap_sig_bdd_218) begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st3_fsm_2 assign process. ///
always @ (ap_sig_bdd_162)
begin
    if (ap_sig_bdd_162) begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st4_fsm_3 assign process. ///
always @ (ap_sig_bdd_225)
begin
    if (ap_sig_bdd_225) begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st5_fsm_4 assign process. ///
always @ (ap_sig_bdd_170)
begin
    if (ap_sig_bdd_170) begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st6_fsm_5 assign process. ///
always @ (ap_sig_bdd_233)
begin
    if (ap_sig_bdd_233) begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st6_fsm_5 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st7_fsm_6 assign process. ///
always @ (ap_sig_bdd_178)
begin
    if (ap_sig_bdd_178) begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st7_fsm_6 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st8_fsm_7 assign process. ///
always @ (ap_sig_bdd_241)
begin
    if (ap_sig_bdd_241) begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = ap_const_logic_0;
    end
end

/// ap_sig_cseq_ST_st9_fsm_8 assign process. ///
always @ (ap_sig_bdd_186)
begin
    if (ap_sig_bdd_186) begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = ap_const_logic_0;
    end
end

/// grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca assign process. ///
always @ (tmp_reg_265 or tmp_3_reg_280 or tmp_6_reg_295 or tmp_9_reg_310 or tmp_12_reg_325 or tmp_15_reg_340 or tmp_18_reg_355 or tmp_22_reg_375 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st16_fsm_15)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca = tmp_22_reg_375;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca = tmp_18_reg_355;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca = tmp_15_reg_340;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca = tmp_12_reg_325;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca = tmp_9_reg_310;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca = tmp_6_reg_295;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca = tmp_3_reg_280;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca = tmp_reg_265;
    end else begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ca = 'bx;
    end
end

/// grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb assign process. ///
always @ (tmp_1_reg_270 or tmp_4_reg_285 or tmp_7_reg_300 or tmp_10_reg_315 or tmp_13_reg_330 or tmp_16_reg_345 or tmp_19_reg_360 or tmp_23_reg_380 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st16_fsm_15)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb = tmp_23_reg_380;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb = tmp_19_reg_360;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb = tmp_16_reg_345;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb = tmp_13_reg_330;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb = tmp_10_reg_315;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb = tmp_7_reg_300;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb = tmp_4_reg_285;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb = tmp_1_reg_270;
    end else begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_cb = 'bx;
    end
end

/// grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit assign process. ///
always @ (tmp_2_reg_275 or tmp_5_reg_290 or tmp_8_reg_305 or tmp_11_reg_320 or tmp_14_reg_335 or tmp_17_reg_350 or tmp_20_reg_365 or tmp_21_reg_370 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st16_fsm_15)
begin
    if ((ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit = tmp_21_reg_370;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit = tmp_20_reg_365;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit = tmp_17_reg_350;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit = tmp_14_reg_335;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit = tmp_11_reg_320;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit = tmp_8_reg_305;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit = tmp_5_reg_290;
    end else if ((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1)) begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit = tmp_2_reg_275;
    end else begin
        grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_plaintextbit = 'bx;
    end
end

/// state_ce0 assign process. ///
always @ (grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_ce0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st16_fsm_15)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) | (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        state_ce0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_ce0;
    end else begin
        state_ce0 = ap_const_logic_0;
    end
end

/// state_we0 assign process. ///
always @ (grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_we0 or ap_sig_cseq_ST_st2_fsm_1 or ap_sig_cseq_ST_st4_fsm_3 or ap_sig_cseq_ST_st6_fsm_5 or ap_sig_cseq_ST_st8_fsm_7 or ap_sig_cseq_ST_st10_fsm_9 or ap_sig_cseq_ST_st12_fsm_11 or ap_sig_cseq_ST_st14_fsm_13 or ap_sig_cseq_ST_st16_fsm_15)
begin
    if (((ap_const_logic_1 == ap_sig_cseq_ST_st2_fsm_1) | (ap_const_logic_1 == ap_sig_cseq_ST_st4_fsm_3) | (ap_const_logic_1 == ap_sig_cseq_ST_st6_fsm_5) | (ap_const_logic_1 == ap_sig_cseq_ST_st8_fsm_7) | (ap_const_logic_1 == ap_sig_cseq_ST_st10_fsm_9) | (ap_const_logic_1 == ap_sig_cseq_ST_st12_fsm_11) | (ap_const_logic_1 == ap_sig_cseq_ST_st14_fsm_13) | (ap_const_logic_1 == ap_sig_cseq_ST_st16_fsm_15))) begin
        state_we0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_we0;
    end else begin
        state_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_logic_0 == grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : 
        begin
            if (~(ap_const_logic_0 == grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            if (~(ap_const_logic_0 == grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st6_fsm_5;
            end
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            if (~(ap_const_logic_0 == grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            if (~(ap_const_logic_0 == grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)) begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end else begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            if (~(ap_const_logic_0 == grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)) begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end else begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            if (~(ap_const_logic_0 == grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)) begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            if (~(ap_const_logic_0 == grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_done)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acorn128_enc_onebyte_AXILiteS_s_axi_U_ap_dummy_ce = ap_const_logic_1;
assign ap_return = ap_const_lv32_0;

/// ap_rst_n_inv assign process. ///
always @ (ap_rst_n)
begin
    ap_rst_n_inv = ~ap_rst_n;
end

/// ap_sig_bdd_162 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_162 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_2]);
end

/// ap_sig_bdd_170 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_170 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_4]);
end

/// ap_sig_bdd_178 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_178 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_6]);
end

/// ap_sig_bdd_186 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_186 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_8]);
end

/// ap_sig_bdd_194 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_194 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_A]);
end

/// ap_sig_bdd_202 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_202 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_C]);
end

/// ap_sig_bdd_210 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_210 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_E]);
end

/// ap_sig_bdd_218 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_218 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_1]);
end

/// ap_sig_bdd_225 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_225 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_3]);
end

/// ap_sig_bdd_233 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_233 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_5]);
end

/// ap_sig_bdd_241 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_241 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_7]);
end

/// ap_sig_bdd_249 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_249 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_9]);
end

/// ap_sig_bdd_257 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_257 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_B]);
end

/// ap_sig_bdd_265 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_265 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_D]);
end

/// ap_sig_bdd_273 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_273 = (ap_const_lv1_1 == ap_CS_fsm[ap_const_lv32_F]);
end

/// ap_sig_bdd_57 assign process. ///
always @ (ap_CS_fsm)
begin
    ap_sig_bdd_57 = (ap_CS_fsm[ap_const_lv32_0] == ap_const_lv1_1);
end
assign grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_ap_start_ap_start_reg;
assign grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_q0 = state_q0;
assign state_address0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_address0;
assign state_d0 = grp_acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit_fu_73_state_d0;
assign tmp_1_fu_87_p1 = cbbyte[0:0];
assign tmp_2_fu_92_p1 = plaintextbyte[0:0];
assign tmp_fu_82_p1 = cabyte[0:0];


endmodule //acorn128_enc_onebyte


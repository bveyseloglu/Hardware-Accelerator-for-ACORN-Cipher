// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.4
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module acorn128_enc_onebyte_AXILiteS_s_axi
#(parameter
    C_ADDR_WIDTH = 11,
    C_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                      ACLK,
    input  wire                      ARESET,
    input  wire                      ACLK_EN,
    input  wire [C_ADDR_WIDTH-1:0]   AWADDR,
    input  wire                      AWVALID,
    output wire                      AWREADY,
    input  wire [C_DATA_WIDTH-1:0]   WDATA,
    input  wire [C_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                      WVALID,
    output wire                      WREADY,
    output wire [1:0]                BRESP,
    output wire                      BVALID,
    input  wire                      BREADY,
    input  wire [C_ADDR_WIDTH-1:0]   ARADDR,
    input  wire                      ARVALID,
    output wire                      ARREADY,
    output wire [C_DATA_WIDTH-1:0]   RDATA,
    output wire [1:0]                RRESP,
    output wire                      RVALID,
    input  wire                      RREADY,
    output wire                      interrupt,
    // user signals
    output wire                      ap_start,
    input  wire                      ap_done,
    input  wire                      ap_ready,
    input  wire                      ap_idle,
    input  wire [31:0]               ap_return,
    input  wire [8:0]                state_address0,
    input  wire                      state_ce0,
    input  wire                      state_we0,
    input  wire [7:0]                state_d0,
    output wire [7:0]                state_q0,
    output wire [7:0]                plaintextbyte,
    output wire [7:0]                ciphertextbyte,
    output wire [7:0]                ksbyte,
    output wire [7:0]                cabyte,
    output wire [7:0]                cbbyte
);
//------------------------Address Info-------------------
// 0x000 : Control signals
//         bit 0  - ap_start (Read/Write/COH)
//         bit 1  - ap_done (Read/COR)
//         bit 2  - ap_idle (Read)
//         bit 3  - ap_ready (Read)
//         bit 7  - auto_restart (Read/Write)
//         others - reserved
// 0x004 : Global Interrupt Enable Register
//         bit 0  - Global Interrupt Enable (Read/Write)
//         others - reserved
// 0x008 : IP Interrupt Enable Register (Read/Write)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x00c : IP Interrupt Status Register (Read/TOW)
//         bit 0  - Channel 0 (ap_done)
//         bit 1  - Channel 1 (ap_ready)
//         others - reserved
// 0x010 : Data signal of ap_return
//         bit 31~0 - ap_return[31:0] (Read)
// 0x400 : Data signal of plaintextbyte
//         bit 7~0 - plaintextbyte[7:0] (Read/Write)
//         others  - reserved
// 0x404 : reserved
// 0x408 : Data signal of ciphertextbyte
//         bit 7~0 - ciphertextbyte[7:0] (Read/Write)
//         others  - reserved
// 0x40c : reserved
// 0x410 : Data signal of ksbyte
//         bit 7~0 - ksbyte[7:0] (Read/Write)
//         others  - reserved
// 0x414 : reserved
// 0x418 : Data signal of cabyte
//         bit 7~0 - cabyte[7:0] (Read/Write)
//         others  - reserved
// 0x41c : reserved
// 0x420 : Data signal of cbbyte
//         bit 7~0 - cbbyte[7:0] (Read/Write)
//         others  - reserved
// 0x424 : reserved
// 0x200 ~
// 0x3ff : Memory 'state' (293 * 8b)
//         Word n : bit [ 7: 0] - state[4n]
//                  bit [15: 8] - state[4n+1]
//                  bit [23:16] - state[4n+2]
//                  bit [31:24] - state[4n+3]
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
// address bits
localparam
    ADDR_BITS = 11;

// address
localparam
    ADDR_AP_CTRL               = 11'h000,
    ADDR_GIE                   = 11'h004,
    ADDR_IER                   = 11'h008,
    ADDR_ISR                   = 11'h00c,
    ADDR_AP_RETURN_0           = 11'h010,
    ADDR_PLAINTEXTBYTE_DATA_0  = 11'h400,
    ADDR_PLAINTEXTBYTE_CTRL    = 11'h404,
    ADDR_CIPHERTEXTBYTE_DATA_0 = 11'h408,
    ADDR_CIPHERTEXTBYTE_CTRL   = 11'h40c,
    ADDR_KSBYTE_DATA_0         = 11'h410,
    ADDR_KSBYTE_CTRL           = 11'h414,
    ADDR_CABYTE_DATA_0         = 11'h418,
    ADDR_CABYTE_CTRL           = 11'h41c,
    ADDR_CBBYTE_DATA_0         = 11'h420,
    ADDR_CBBYTE_CTRL           = 11'h424,
    ADDR_STATE_BASE            = 11'h200,
    ADDR_STATE_HIGH            = 11'h3ff;

// axi write fsm
localparam
    WRIDLE = 2'd0,
    WRDATA = 2'd1,
    WRRESP = 2'd2;

// axi read fsm
localparam
    RDIDLE = 2'd0,
    RDDATA = 2'd1;

//------------------------Local signal-------------------
// axi write
reg  [1:0]           wstate;
reg  [1:0]           wnext;
reg  [ADDR_BITS-1:0] waddr;
wire [31:0]          wmask;
wire                 aw_hs;
wire                 w_hs;
// axi read
reg  [1:0]           rstate;
reg  [1:0]           rnext;
reg  [31:0]          rdata;
wire                 ar_hs;
wire [ADDR_BITS-1:0] raddr;
// internal registers
wire                 int_ap_idle;
wire                 int_ap_ready;
reg                  int_ap_done;
reg                  int_ap_start;
reg                  int_auto_restart;
reg                  int_gie;
reg  [1:0]           int_ier;
reg  [1:0]           int_isr;
reg  [31:0]          int_ap_return;
reg  [7:0]           int_plaintextbyte;
reg  [7:0]           int_ciphertextbyte;
reg  [7:0]           int_ksbyte;
reg  [7:0]           int_cabyte;
reg  [7:0]           int_cbbyte;
// memory signals
wire [6:0]           int_state_address0;
wire                 int_state_ce0;
wire                 int_state_we0;
wire [3:0]           int_state_be0;
wire [31:0]          int_state_d0;
wire [31:0]          int_state_q0;
wire [6:0]           int_state_address1;
wire                 int_state_ce1;
wire                 int_state_we1;
wire [3:0]           int_state_be1;
wire [31:0]          int_state_d1;
wire [31:0]          int_state_q1;
reg                  int_state_read;
reg                  int_state_write;
reg  [1:0]           int_state_shift;

//------------------------Instantiation------------------
// int_state
acorn128_enc_onebyte_AXILiteS_s_axi_ram #(
    .BYTES    ( 4 ),
    .DEPTH    ( 74 )
) int_state (
    .clk      ( ACLK ),
    .address0 ( int_state_address0 ),
    .ce0      ( int_state_ce0 ),
    .we0      ( int_state_we0 ),
    .be0      ( int_state_be0 ),
    .d0       ( int_state_d0 ),
    .q0       ( int_state_q0 ),
    .address1 ( int_state_address1 ),
    .ce1      ( int_state_ce1 ),
    .we1      ( int_state_we1 ),
    .be1      ( int_state_be1 ),
    .d1       ( int_state_d1 ),
    .q1       ( int_state_q1 )
);

//------------------------Body---------------------------
//++++++++++++++++++++++++axi write++++++++++++++++++++++
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ARESET)
            wstate <= WRIDLE;
        else
            wstate <= wnext;
    end
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (aw_hs)
            waddr <= AWADDR[ADDR_BITS-1:0];
    end
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++axi read+++++++++++++++++++++++
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA) & !int_state_read;
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ARESET)
            rstate <= RDIDLE;
        else
            rstate <= rnext;
    end
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY & RVALID)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (ar_hs) begin
            rdata <= 1'b0;
            case (raddr)
                ADDR_AP_CTRL: begin
                    rdata[0] <= int_ap_start;
                    rdata[1] <= int_ap_done;
                    rdata[2] <= int_ap_idle;
                    rdata[3] <= int_ap_ready;
                    rdata[7] <= int_auto_restart;
                end
                ADDR_GIE: begin
                    rdata <= int_gie;
                end
                ADDR_IER: begin
                    rdata <= int_ier;
                end
                ADDR_ISR: begin
                    rdata <= int_isr;
                end
                ADDR_AP_RETURN_0: begin
                    rdata <= int_ap_return[31:0];
                end
                ADDR_PLAINTEXTBYTE_DATA_0: begin
                    rdata <= int_plaintextbyte[7:0];
                end
                ADDR_CIPHERTEXTBYTE_DATA_0: begin
                    rdata <= int_ciphertextbyte[7:0];
                end
                ADDR_KSBYTE_DATA_0: begin
                    rdata <= int_ksbyte[7:0];
                end
                ADDR_CABYTE_DATA_0: begin
                    rdata <= int_cabyte[7:0];
                end
                ADDR_CBBYTE_DATA_0: begin
                    rdata <= int_cbbyte[7:0];
                end
            endcase
        end
        else if (int_state_read) begin
            rdata <= int_state_q1;
        end
    end
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++internal registers+++++++++++++
assign interrupt      = int_gie & (|int_isr);
assign ap_start       = int_ap_start;
assign int_ap_idle    = ap_idle;
assign int_ap_ready   = ap_ready;
assign plaintextbyte  = int_plaintextbyte;
assign ciphertextbyte = int_ciphertextbyte;
assign ksbyte         = int_ksbyte;
assign cabyte         = int_cabyte;
assign cbbyte         = int_cbbyte;

// int_ap_start
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_start <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
            int_ap_start <= 1'b1;
        else if (int_ap_ready)
            int_ap_start <= int_auto_restart; // clear on handshake/auto restart
    end
end

// int_ap_done
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_done <= 1'b0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_done <= 1'b1;
        else if (ar_hs && raddr == ADDR_AP_CTRL)
            int_ap_done <= 1'b0; // clear on read
    end
end

// int_auto_restart
always @(posedge ACLK) begin
    if (ARESET)
        int_auto_restart <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
            int_auto_restart <=  WDATA[7];
    end
end

// int_gie
always @(posedge ACLK) begin
    if (ARESET)
        int_gie <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_GIE && WSTRB[0])
            int_gie <= WDATA[0];
    end
end

// int_ier
always @(posedge ACLK) begin
    if (ARESET)
        int_ier <= 1'b0;
    else if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_IER && WSTRB[0])
            int_ier <= WDATA[1:0];
    end
end

// int_isr[0]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[0] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[0] & ap_done)
            int_isr[0] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[0] <= int_isr[0] ^ WDATA[0]; // toggle on write
    end
end

// int_isr[1]
always @(posedge ACLK) begin
    if (ARESET)
        int_isr[1] <= 1'b0;
    else if (ACLK_EN) begin
        if (int_ier[1] & ap_ready)
            int_isr[1] <= 1'b1;
        else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
            int_isr[1] <= int_isr[1] ^ WDATA[1]; // toggle on write
    end
end

// int_ap_return
always @(posedge ACLK) begin
    if (ARESET)
        int_ap_return <= 0;
    else if (ACLK_EN) begin
        if (ap_done)
            int_ap_return <= ap_return;
    end
end

// int_plaintextbyte[7:0]
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_PLAINTEXTBYTE_DATA_0)
            int_plaintextbyte[7:0] <= (WDATA[31:0] & wmask) | (int_plaintextbyte[7:0] & ~wmask);
    end
end

// int_ciphertextbyte[7:0]
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CIPHERTEXTBYTE_DATA_0)
            int_ciphertextbyte[7:0] <= (WDATA[31:0] & wmask) | (int_ciphertextbyte[7:0] & ~wmask);
    end
end

// int_ksbyte[7:0]
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_KSBYTE_DATA_0)
            int_ksbyte[7:0] <= (WDATA[31:0] & wmask) | (int_ksbyte[7:0] & ~wmask);
    end
end

// int_cabyte[7:0]
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CABYTE_DATA_0)
            int_cabyte[7:0] <= (WDATA[31:0] & wmask) | (int_cabyte[7:0] & ~wmask);
    end
end

// int_cbbyte[7:0]
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (w_hs && waddr == ADDR_CBBYTE_DATA_0)
            int_cbbyte[7:0] <= (WDATA[31:0] & wmask) | (int_cbbyte[7:0] & ~wmask);
    end
end

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++memory signals ++++++++++++++++
// state
assign int_state_address0 = state_address0 >> 2;
assign int_state_ce0      = state_ce0;
assign int_state_we0      = state_we0;
assign int_state_be0      = 1 << state_address0[1:0];
assign int_state_d0       = {4{state_d0}};
assign state_q0           = int_state_q0 >> (int_state_shift * 8);
assign int_state_address1 = ar_hs? raddr[8:2] : waddr[8:2];
assign int_state_ce1      = ar_hs | (int_state_write & WVALID);
assign int_state_we1      = int_state_write & WVALID;
assign int_state_be1      = WSTRB;
assign int_state_d1       = WDATA;

// int_state_read
always @(posedge ACLK) begin
    if (ARESET)
        int_state_read <= 1'b0;
    else if (ACLK_EN) begin
        if (ar_hs && raddr >= ADDR_STATE_BASE && raddr <= ADDR_STATE_HIGH)
            int_state_read <= 1'b1;
        else
            int_state_read <= 1'b0;
    end
end

// int_state_write
always @(posedge ACLK) begin
    if (ARESET)
        int_state_write <= 1'b0;
    else if (ACLK_EN) begin
        if (aw_hs && AWADDR[ADDR_BITS-1:0] >= ADDR_STATE_BASE && AWADDR[ADDR_BITS-1:0] <= ADDR_STATE_HIGH)
            int_state_write <= 1'b1;
        else if (WVALID)
            int_state_write <= 1'b0;
    end
end

// int_state_shift
always @(posedge ACLK) begin
    if (ACLK_EN) begin
        if (state_ce0)
            int_state_shift <= state_address0[1:0];
    end
end

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule


`timescale 1ns/1ps

module acorn128_enc_onebyte_AXILiteS_s_axi_ram
#(parameter
    BYTES  = 4,
    DEPTH  = 256,
    AWIDTH = log2(DEPTH)
) (
    input  wire               clk,
    input  wire [AWIDTH-1:0]  address0,
    input  wire               ce0,
    input  wire               we0,
    input  wire [BYTES-1:0]   be0,
    input  wire [BYTES*8-1:0] d0,
    output reg  [BYTES*8-1:0] q0,
    input  wire [AWIDTH-1:0]  address1,
    input  wire               ce1,
    input  wire               we1,
    input  wire [BYTES-1:0]   be1,
    input  wire [BYTES*8-1:0] d1,
    output reg  [BYTES*8-1:0] q1
);
//------------------------Local signal-------------------
reg  [BYTES*8-1:0] mem[0:DEPTH-1];
//------------------------Task and function--------------
function integer log2;
    input integer x;
    integer n, m;
begin
    n = 1;
    m = 2;
    while (m < x) begin
        n = n + 1;
        m = m * 2;
    end
    log2 = n;
end
endfunction
//------------------------Body---------------------------
// read port 0
always @(posedge clk) begin
    if (ce0) q0 <= mem[address0];
end

// read port 1
always @(posedge clk) begin
    if (ce1) q1 <= mem[address1];
end

genvar i;
generate
    for (i = 0; i < BYTES; i = i + 1) begin : gen_write
        // write port 0
        always @(posedge clk) begin
            if (ce0 & we0 & be0[i]) begin
                mem[address0][8*i+7:8*i] <= d0[8*i+7:8*i];
            end
        end
        // write port 1
        always @(posedge clk) begin
            if (ce1 & we1 & be1[i]) begin
                mem[address1][8*i+7:8*i] <= d1[8*i+7:8*i];
            end
        end
    end
endgenerate

endmodule


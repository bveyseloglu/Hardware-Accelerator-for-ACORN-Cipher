

================================================================
== Vivado HLS Report for 'acorn128_enc_onebyte_Encrypt_StateUpdate128_1bit'
================================================================
* Date:           Mon May 13 02:31:05 2019

* Version:        2014.4 (Build 1071461 on Tue Nov 18 16:42:57 PM 2014)
* Project:        soc_proj_hls_deneme_1
* Solution:       solution1
* Product family: zynq
* Target device:  xc7z020clg484-1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +---------+-------+----------+------------+
    |  Clock  | Target| Estimated| Uncertainty|
    +---------+-------+----------+------------+
    |default  |  10.00|      8.22|        1.25|
    +---------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |  605|  605|  605|  605|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |          |  Latency  | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name| min | max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+-----+-----+----------+-----------+-----------+------+----------+
        |- Loop 1  |  584|  584|         2|          -|          -|   292|    no    |
        +----------+-----+-----+----------+-----------+-----------+------+----------+



================================================================
== Utilization Estimates
================================================================
* Summary: 
+-----------------+---------+-------+--------+-------+
|       Name      | BRAM_18K| DSP48E|   FF   |  LUT  |
+-----------------+---------+-------+--------+-------+
|Expression       |        -|      -|       -|      -|
|FIFO             |        -|      -|       -|      -|
|Instance         |        -|      -|       -|      -|
|Memory           |        -|      -|       -|      -|
|Multiplexer      |        -|      -|       -|      -|
|Register         |        -|      -|       -|      -|
+-----------------+---------+-------+--------+-------+
|Total            |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+
|Available        |      280|    220|  106400|  53200|
+-----------------+---------+-------+--------+-------+
|Utilization (%)  |        0|      0|       0|      0|
+-----------------+---------+-------+--------+-------+

+ Detail: 
    * Instance: 
    N/A

    * Memory: 
    N/A

    * FIFO: 
    N/A

    * Expression: 
    N/A

    * Multiplexer: 
    N/A

    * Register: 
    N/A



================================================================
== Interface
================================================================
* Summary: 
N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 23
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
	17  / true
17 --> 
	18  / true
18 --> 
	19  / true
19 --> 
	20  / true
20 --> 
	21  / true
21 --> 
	22  / true
22 --> 
	23  / (!exitcond)
23 --> 
	22  / true
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: state_addr_1 [1/1] 0.00ns
:5  %state_addr_1 = getelementptr [293 x i8]* %state, i64 0, i64 235

ST_1: state_load [2/2] 2.39ns
:6  %state_load = load i8* %state_addr_1, align 1


 <State 2>: 2.39ns
ST_2: state_load [1/2] 2.39ns
:6  %state_load = load i8* %state_addr_1, align 1

ST_2: tmp_24 [1/1] 0.00ns
:7  %tmp_24 = trunc i8 %state_load to i1

ST_2: state_addr_2 [1/1] 0.00ns
:8  %state_addr_2 = getelementptr [293 x i8]* %state, i64 0, i64 230

ST_2: state_load_1 [2/2] 2.39ns
:9  %state_load_1 = load i8* %state_addr_2, align 1


 <State 3>: 2.39ns
ST_3: state_load_1 [1/2] 2.39ns
:9  %state_load_1 = load i8* %state_addr_2, align 1

ST_3: state_addr_3 [1/1] 0.00ns
:10  %state_addr_3 = getelementptr [293 x i8]* %state, i64 0, i64 289

ST_3: state_load_2 [2/2] 2.39ns
:11  %state_load_2 = load i8* %state_addr_3, align 1


 <State 4>: 3.76ns
ST_4: state_load_2 [1/2] 2.39ns
:11  %state_load_2 = load i8* %state_addr_3, align 1

ST_4: tmp1 [1/1] 1.37ns
:12  %tmp1 = xor i8 %state_load, %state_load_2

ST_4: state_addr_4 [1/1] 0.00ns
:15  %state_addr_4 = getelementptr [293 x i8]* %state, i64 0, i64 196

ST_4: state_load_3 [2/2] 2.39ns
:16  %state_load_3 = load i8* %state_addr_4, align 1


 <State 5>: 2.39ns
ST_5: state_load_3 [1/2] 2.39ns
:16  %state_load_3 = load i8* %state_addr_4, align 1

ST_5: tmp_25 [1/1] 0.00ns
:17  %tmp_25 = trunc i8 %state_load_3 to i1

ST_5: state_addr_5 [1/1] 0.00ns
:18  %state_addr_5 = getelementptr [293 x i8]* %state, i64 0, i64 193

ST_5: state_load_4 [2/2] 2.39ns
:19  %state_load_4 = load i8* %state_addr_5, align 1


 <State 6>: 5.13ns
ST_6: tmp_s [1/1] 1.37ns
:13  %tmp_s = xor i8 %tmp1, %state_load_1

ST_6: state_load_4 [1/2] 2.39ns
:19  %state_load_4 = load i8* %state_addr_5, align 1

ST_6: tmp2 [1/1] 1.37ns
:20  %tmp2 = xor i8 %state_load_1, %state_load_4

ST_6: x_assign_1 [1/1] 1.37ns
:21  %x_assign_1 = xor i8 %tmp2, %state_load_3

ST_6: tmp_26 [1/1] 0.00ns
:22  %tmp_26 = trunc i8 %x_assign_1 to i1

ST_6: state_addr_6 [1/1] 0.00ns
:24  %state_addr_6 = getelementptr [293 x i8]* %state, i64 0, i64 160

ST_6: state_load_5 [2/2] 2.39ns
:25  %state_load_5 = load i8* %state_addr_6, align 1


 <State 7>: 2.39ns
ST_7: state_load_5 [1/2] 2.39ns
:25  %state_load_5 = load i8* %state_addr_6, align 1

ST_7: state_addr_7 [1/1] 0.00ns
:26  %state_addr_7 = getelementptr [293 x i8]* %state, i64 0, i64 154

ST_7: state_load_6 [2/2] 2.39ns
:27  %state_load_6 = load i8* %state_addr_7, align 1


 <State 8>: 2.39ns
ST_8: state_load_6 [1/2] 2.39ns
:27  %state_load_6 = load i8* %state_addr_7, align 1

ST_8: state_addr_8 [1/1] 0.00ns
:32  %state_addr_8 = getelementptr [293 x i8]* %state, i64 0, i64 111

ST_8: state_load_7 [2/2] 2.39ns
:33  %state_load_7 = load i8* %state_addr_8, align 1


 <State 9>: 2.39ns
ST_9: state_load_7 [1/2] 2.39ns
:33  %state_load_7 = load i8* %state_addr_8, align 1

ST_9: tmp_28 [1/1] 0.00ns
:34  %tmp_28 = trunc i8 %state_load_7 to i1

ST_9: state_addr_9 [1/1] 0.00ns
:35  %state_addr_9 = getelementptr [293 x i8]* %state, i64 0, i64 107

ST_9: state_load_8 [2/2] 2.39ns
:36  %state_load_8 = load i8* %state_addr_9, align 1


 <State 10>: 5.13ns
ST_10: tmp3 [1/1] 1.37ns
:28  %tmp3 = xor i8 %state_load_4, %state_load_6

ST_10: state_load_8 [1/2] 2.39ns
:36  %state_load_8 = load i8* %state_addr_9, align 1

ST_10: tmp4 [1/1] 1.37ns
:37  %tmp4 = xor i8 %state_load_6, %state_load_8

ST_10: tmp_3 [1/1] 1.37ns
:38  %tmp_3 = xor i8 %tmp4, %state_load_7

ST_10: tmp_29 [1/1] 0.00ns
:39  %tmp_29 = trunc i8 %tmp_3 to i1

ST_10: state_addr_10 [1/1] 0.00ns
:41  %state_addr_10 = getelementptr [293 x i8]* %state, i64 0, i64 66

ST_10: state_load_9 [2/2] 2.39ns
:42  %state_load_9 = load i8* %state_addr_10, align 1


 <State 11>: 5.13ns
ST_11: state_load_9 [1/2] 2.39ns
:42  %state_load_9 = load i8* %state_addr_10, align 1

ST_11: tmp_30 [1/1] 0.00ns
:43  %tmp_30 = trunc i8 %state_load_9 to i1

ST_11: state_addr_11 [1/1] 0.00ns
:44  %state_addr_11 = getelementptr [293 x i8]* %state, i64 0, i64 61

ST_11: state_load_10 [2/2] 2.39ns
:45  %state_load_10 = load i8* %state_addr_11, align 1

ST_11: tmp_i9_i_i [1/1] 1.37ns
:62  %tmp_i9_i_i = and i1 %tmp_28, %tmp_26

ST_11: tmp_4_i_i_i [1/1] 1.37ns
:63  %tmp_4_i_i_i = xor i1 %tmp_26, true

ST_11: tmp_5_i_i_i [1/1] 1.37ns
:64  %tmp_5_i_i_i = and i1 %tmp_30, %tmp_4_i_i_i

ST_11: tmp [1/1] 1.37ns
:67  %tmp = xor i1 %tmp_i9_i_i, %tmp_5_i_i_i


 <State 12>: 5.13ns
ST_12: state_load_10 [1/2] 2.39ns
:45  %state_load_10 = load i8* %state_addr_11, align 1

ST_12: tmp5 [1/1] 1.37ns
:46  %tmp5 = xor i8 %state_load_8, %state_load_10

ST_12: tmp_5 [1/1] 1.37ns
:47  %tmp_5 = xor i8 %tmp5, %state_load_9

ST_12: state_addr_12 [1/1] 0.00ns
:49  %state_addr_12 = getelementptr [293 x i8]* %state, i64 0, i64 23

ST_12: state_load_11 [2/2] 2.39ns
:50  %state_load_11 = load i8* %state_addr_12, align 1


 <State 13>: 2.39ns
ST_13: state_addr [1/1] 0.00ns
:4  %state_addr = getelementptr [293 x i8]* %state, i64 0, i64 0

ST_13: state_load_11 [1/2] 2.39ns
:50  %state_load_11 = load i8* %state_addr_12, align 1

ST_13: state_load_12 [2/2] 2.39ns
:51  %state_load_12 = load i8* %state_addr, align 1


 <State 14>: 2.39ns
ST_14: state_load_12 [1/2] 2.39ns
:51  %state_load_12 = load i8* %state_addr, align 1

ST_14: state_addr_16 [1/1] 0.00ns
:56  %state_addr_16 = getelementptr [293 x i8]* %state, i64 0, i64 12

ST_14: state_load_14 [2/2] 2.39ns
:57  %state_load_14 = load i8* %state_addr_16, align 1


 <State 15>: 8.22ns
ST_15: z_assign [1/1] 1.37ns
:29  %z_assign = xor i8 %tmp3, %state_load_5

ST_15: tmp_27 [1/1] 0.00ns
:30  %tmp_27 = trunc i8 %z_assign to i1

ST_15: tmp6 [1/1] 1.37ns
:52  %tmp6 = xor i8 %state_load_10, %state_load_12

ST_15: y_assign [1/1] 1.37ns
:53  %y_assign = xor i8 %tmp6, %state_load_11

ST_15: tmp_31 [1/1] 0.00ns
:54  %tmp_31 = trunc i8 %y_assign to i1

ST_15: state_load_14 [1/2] 2.39ns
:57  %state_load_14 = load i8* %state_addr_16, align 1

ST_15: tmp_32 [1/1] 0.00ns
:58  %tmp_32 = trunc i8 %state_load_14 to i1

ST_15: tmp_i_i_i [1/1] 1.37ns
:59  %tmp_i_i_i = xor i1 %tmp_27, %tmp_31

ST_15: tmp_1_i_i_i [1/1] 1.37ns
:60  %tmp_1_i_i_i = and i1 %tmp_i_i_i, %tmp_24

ST_15: tmp_2_i_i_i [1/1] 1.37ns
:61  %tmp_2_i_i_i = and i1 %tmp_27, %tmp_31

ST_15: tmp8 [1/1] 1.37ns
:65  %tmp8 = xor i1 %tmp_32, %tmp_2_i_i_i

ST_15: tmp7 [1/1] 1.37ns
:66  %tmp7 = xor i1 %tmp8, %tmp_29

ST_15: tmp9 [1/1] 1.37ns
:68  %tmp9 = xor i1 %tmp, %tmp_1_i_i_i

ST_15: tmp_i_i [1/1] 1.37ns
:69  %tmp_i_i = xor i1 %tmp9, %tmp7

ST_15: state_addr_17 [1/1] 0.00ns
:70  %state_addr_17 = getelementptr [293 x i8]* %state, i64 0, i64 244

ST_15: state_load_15 [2/2] 2.39ns
:71  %state_load_15 = load i8* %state_addr_17, align 1


 <State 16>: 3.76ns
ST_16: stg_100 [1/1] 2.39ns
:14  store i8 %tmp_s, i8* %state_addr_3, align 1

ST_16: state_load_15 [1/2] 2.39ns
:71  %state_load_15 = load i8* %state_addr_17, align 1

ST_16: tmp_i_i_2 [1/1] 1.37ns
:72  %tmp_i_i_2 = xor i8 %state_load_5, %state_load_11

ST_16: tmp_1_i_i [1/1] 1.37ns
:73  %tmp_1_i_i = and i8 %tmp_i_i_2, %state_load_15

ST_16: tmp_2_i_i [1/1] 1.37ns
:74  %tmp_2_i_i = and i8 %state_load_5, %state_load_11


 <State 17>: 2.39ns
ST_17: stg_105 [1/1] 2.39ns
:23  store i8 %x_assign_1, i8* %state_addr_2, align 1


 <State 18>: 2.39ns
ST_18: stg_106 [1/1] 2.39ns
:31  store i8 %z_assign, i8* %state_addr_5, align 1


 <State 19>: 2.39ns
ST_19: stg_107 [1/1] 2.39ns
:40  store i8 %tmp_3, i8* %state_addr_7, align 1


 <State 20>: 2.39ns
ST_20: stg_108 [1/1] 2.39ns
:48  store i8 %tmp_5, i8* %state_addr_9, align 1


 <State 21>: 2.65ns
ST_21: empty [1/1] 0.00ns
:0  %empty = call i32 (...)* @_ssdm_op_SpecMemCore([293 x i8]* %state, [1 x i8]* @str4, [7 x i8]* @str3, [1 x i8]* @str4, i32 -1, [1 x i8]* @str4, [1 x i8]* @str4, [1 x i8]* @str4)

ST_21: cb_read [1/1] 1.28ns
:1  %cb_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %cb)

ST_21: ca_read [1/1] 1.28ns
:2  %ca_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %ca)

ST_21: plaintextbit_read [1/1] 1.28ns
:3  %plaintextbit_read = call i1 @_ssdm_op_Read.ap_auto.i1(i1 %plaintextbit)

ST_21: stg_113 [1/1] 2.39ns
:55  store i8 %y_assign, i8* %state_addr_11, align 1

ST_21: tmp_1_i [1/1] 1.37ns
:75  %tmp_1_i = and i1 %tmp_25, %ca_read

ST_21: tmp_2_i [1/1] 1.37ns
:76  %tmp_2_i = and i1 %tmp_i_i, %cb_read

ST_21: stg_116 [1/1] 1.57ns
:77  br label %1


 <State 22>: 6.50ns
ST_22: j [1/1] 0.00ns
:0  %j = phi i9 [ 0, %0 ], [ %j_1, %2 ]

ST_22: exitcond [1/1] 2.03ns
:1  %exitcond = icmp eq i9 %j, -220

ST_22: empty_3 [1/1] 0.00ns
:2  %empty_3 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 292, i64 292, i64 292)

ST_22: j_1 [1/1] 1.84ns
:3  %j_1 = add i9 %j, 1

ST_22: stg_121 [1/1] 0.00ns
:4  br i1 %exitcond, label %3, label %2

ST_22: tmp_6 [1/1] 0.00ns
:0  %tmp_6 = zext i9 %j_1 to i64

ST_22: state_addr_14 [1/1] 0.00ns
:1  %state_addr_14 = getelementptr [293 x i8]* %state, i64 0, i64 %tmp_6

ST_22: state_load_13 [2/2] 2.39ns
:2  %state_load_13 = load i8* %state_addr_14, align 1

ST_22: tmp10 [1/1] 1.37ns
:0  %tmp10 = xor i8 %state_load_12, %tmp_5

ST_22: tmp12 [1/1] 1.37ns
:1  %tmp12 = xor i8 %tmp_2_i_i, %tmp_1_i_i

ST_22: tmp11 [1/1] 1.37ns
:2  %tmp11 = xor i8 %tmp12, %tmp10

ST_22: tmp13 [1/1] 1.37ns
:3  %tmp13 = xor i1 %tmp_1_i, %tmp_2_i

ST_22: tmp15 [1/1] 1.37ns
:4  %tmp15 = xor i1 %plaintextbit_read, true

ST_22: tmp14 [1/1] 1.37ns
:5  %tmp14 = xor i1 %tmp13, %tmp15

ST_22: tmp14_cast [1/1] 0.00ns
:6  %tmp14_cast = zext i1 %tmp14 to i8

ST_22: tmp_4 [1/1] 1.37ns
:7  %tmp_4 = xor i8 %tmp14_cast, %tmp11

ST_22: state_addr_13 [1/1] 0.00ns
:8  %state_addr_13 = getelementptr [293 x i8]* %state, i64 0, i64 292

ST_22: stg_134 [1/1] 2.39ns
:9  store i8 %tmp_4, i8* %state_addr_13, align 1

ST_22: stg_135 [1/1] 0.00ns
:10  ret void


 <State 23>: 4.78ns
ST_23: state_load_13 [1/2] 2.39ns
:2  %state_load_13 = load i8* %state_addr_14, align 1

ST_23: tmp_7 [1/1] 0.00ns
:3  %tmp_7 = zext i9 %j to i64

ST_23: state_addr_15 [1/1] 0.00ns
:4  %state_addr_15 = getelementptr [293 x i8]* %state, i64 0, i64 %tmp_7

ST_23: stg_139 [1/1] 2.39ns
:5  store i8 %state_load_13, i8* %state_addr_15, align 1

ST_23: stg_140 [1/1] 0.00ns
:6  br label %1



============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16
	State 17
	State 18
	State 19
	State 20
	State 21
	State 22
	State 23


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
